name: Continuous Integration

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'
  push:
    branches:
      - 'main'
      - 'renovate/**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'

permissions:
  contents: read

jobs:
  golangci-lint:
    name: Lint Go files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: '0'

      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: './go.mod'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@ec5d18412c0aeab7936cb16880d708ba2a64e1ae # v6.2.0
        with:
          version: latest
          args: --config=./.github/.golangci.yml
          # Skip cache because of flaky behavior:
          # https://github.com/golangci/golangci-lint/blob/master/.github/workflows/pr.yml#L49
          skip-cache: true
          skip-save-cache: true

  lint-charts:
    name: Lint Helm charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4

      - name: Set up helm-unittest
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Lint charts
        run: ct --config .github/ct.yaml lint --debug

      - name: Run unit tests
        run: |
          for chart in $(ct list-changed --config .github/ct-lint.yaml); do
            if [ -d "$chart/tests/" ]; then
              helm unittest $chart
            else
              echo "No unit tests found for $chart"
            fi
          done

      - name: Install Helm Docs
        # Use syntax ${version} instead of $version
        # In certain contexts, only the less ambiguous ${version} form works
        # Source: https://tldp.org/LDP/abs/html/parameter-substitution.html
        run: |
          version="v1.14.2"
          stripped=$( echo "${version}" | sed s'/v//' )
          wget https://github.com/norwoodj/helm-docs/releases/download/${version}/helm-docs_${stripped}_Linux_x86_64.tar.gz
          tar --extract --verbose --file="helm-docs_${stripped}_Linux_x86_64.tar.gz" helm-docs
          sudo mv helm-docs /usr/local/sbin

      - name: Verify Helm docs are up to date
        run: |
         helm-docs
         git diff --exit-code -- charts/k8s-agents-operator/README.md

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: './go.mod'

      - name: Set up tests
        run: |
          make clean
          make format
          make modules

      - name: Run unit tests for Go
        run: |
          make test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@5a605bd92782ce0810fa3b8acc235c921b497052 # v5.2.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./tmp/cover.out

  e2e-tests:
    name: E2E tests
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6 # len(k8sVersion)/2 is a good number to have here
      matrix:
        # Latest patch version can be found in https://github.com/kubernetes/website/blob/main/content/en/releases/patch-releases.md
        # Some versions might not be available yet in https://storage.googleapis.com/kubernetes-release/release/v1.X.Y/bin/linux/amd64/kubelet
        k8sVersion: [ "v1.31.1", "v1.30.5", "v1.29.9", "v1.28.14", "v1.27.16", "v1.26.15" ]
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64

      - name: Run E2E tests
        run: |
          cd tests/e2e
          ./e2e-tests.sh --k8s_version ${{ matrix.k8sVersion }} --license_key ${{ secrets.K8S_AGENTS_E2E_LICENSE_KEY }} --run_tests

  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: |
            newrelic/k8s-agents-operator
          tags: |
            # reflects the last commit of the active branch
            type=edge
            # nightly tag
            type=schedule
            # push tag event
            type=semver,pattern={{version}}
            # push tag event
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/heads/renovate')
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.K8S_AGENTS_DOCKERHUB_USERNAME }}
          password: ${{ secrets.K8S_AGENTS_DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Build and push
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # v6.12.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm
          build-args: |
            K8S_AGENTS_OPERATOR_VERSION=${{ steps.metadata.outputs.version }}
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/heads/renovate') }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
